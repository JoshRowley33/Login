<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Login/Register Demo</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: linear-gradient(to right, #e0f7e9, #4caf50);
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
    .container {
      background: #fff;
      border-radius: 12px;
      padding: 2rem;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
      width: 350px;
      text-align: center;
    }
    .tabs {
      display: flex;
      justify-content: space-around;
      margin-bottom: 1.5rem;
    }
    .tabs button {
      flex: 1;
      padding: 0.5rem;
      border: none;
      background: none;
      font-weight: bold;
      font-size: 1rem;
      cursor: pointer;
      transition: 0.3s;
    }
    .tabs button.active {
      background: #4caf50;
      color: white;
      border-radius: 6px;
    }
    form {
      display: none;
      text-align: left;
    }
    form.active {
      display: block;
    }
    input[type="text"], input[type="password"] {
      width: 100%;
      padding: 0.5rem;
      margin: 0.5rem 0;
      border: 1px solid #ccc;
      border-radius: 6px;
    }
    button.submit {
      width: 100%;
      padding: 0.6rem;
      background: #4caf50;
      border: none;
      color: white;
      border-radius: 6px;
      font-weight: bold;
      margin-top: 1rem;
      cursor: pointer;
    }
    .success {
      color: green;
      text-align: center;
    }
    .error {
      color: red;
      text-align: center;
    }
    .strength-meter {
      width: 100%;
      height: 10px;
      border-radius: 6px;
      margin-top: 0.5rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>Welcome!</h2>
    <div class="tabs">
      <button id="regTab" class="active" onclick="showForm('register')">Register</button>
      <button id="loginTab" onclick="showForm('login')">Login</button>
    </div>

    <form id="registerForm" class="active">
      <label>Username</label>
      <input type="text" id="regUsername" />
      <label>Password</label>
      <input type="password" id="regPassword" oninput="checkPasswordStrength()" />
      <div id="passwordStrength" class="strength-meter"></div>
      <button class="submit" type="button" onclick="registerUser()">Register</button>
    </form>

    <form id="loginForm">
      <label>Username</label>
      <input type="text" id="loginUsername" />
      <label>Password</label>
      <input type="password" id="loginPassword" />
      <button class="submit" type="button" onclick="loginUser()">Login</button>
    </form>

    <div id="message" class="success"></div>
  </div>

  <script>
    // Cache DOM elements
    const regForm = document.getElementById("registerForm");
    const loginForm = document.getElementById("loginForm");
    const regTab = document.getElementById("regTab");
    const loginTab = document.getElementById("loginTab");
    const message = document.getElementById("message");
    
    const regUsernameInput = document.getElementById("regUsername");
    const regPasswordInput = document.getElementById("regPassword");
    const passwordStrength = document.getElementById("passwordStrength");
    const loginUsernameInput = document.getElementById("loginUsername");
    const loginPasswordInput = document.getElementById("loginPassword");

    // Show the selected form
    function showForm(formType) {
      regForm.classList.remove("active");
      loginForm.classList.remove("active");
      regTab.classList.remove("active");
      loginTab.classList.remove("active");

      if (formType === "register") {
        regForm.classList.add("active");
        regTab.classList.add("active");
      } else {
        loginForm.classList.add("active");
        loginTab.classList.add("active");
      }

      message.textContent = "";
    }

    // Register new user
    function registerUser() {
      const username = regUsernameInput.value.trim();
      const password = regPasswordInput.value;

      // Check if username already exists
      const users = JSON.parse(localStorage.getItem("users")) || [];
      const userExists = users.some(user => user.username === username);

      if (userExists) {
        message.textContent = "Username already exists.";
        message.classList.remove("success");
        message.classList.add("error");
      } else {
        // Save new user to localStorage
        users.push({ username, password });
        localStorage.setItem("users", JSON.stringify(users));
        message.textContent = "Registration successful!";
        message.classList.remove("error");
        message.classList.add("success");
        showForm("login");
      }
    }

    // Log in existing user
    function loginUser() {
      const username = loginUsernameInput.value.trim();
      const password = loginPasswordInput.value;

      const users = JSON.parse(localStorage.getItem("users")) || [];
      const user = users.find(user => user.username === username && user.password === password);

      if (user) {
        // Successful login
        window.location.href = "PNP.html"; // Redirect to a different page upon login
      } else {
        message.textContent = "Invalid username or password.";
        message.classList.remove("success");
        message.classList.add("error");
      }
    }

    // Check password strength
    function checkPasswordStrength() {
      const password = regPasswordInput.value;
      const strength = getPasswordStrength(password);

      // Set the color of the password strength meter based on the strength
      passwordStrength.style.width = `${strength.percent}%`;

      if (strength.percent < 30) {
        passwordStrength.style.backgroundColor = 'red';
      } else if (strength.percent < 60) {
        passwordStrength.style.backgroundColor = 'orange';
      } else {
        passwordStrength.style.backgroundColor = 'green';
      }
    }

    // Get password strength (returns percentage and description)
    function getPasswordStrength(password) {
      let strength = 0;

      if (password.length >= 6) strength += 20;
      if (password.length >= 8) strength += 20;
      if (/[A-Z]/.test(password)) strength += 20;
      if (/[0-9]/.test(password)) strength += 20;
      if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) strength += 20;

      return { percent: strength, description: strength < 30 ? "Weak" : strength < 60 ? "Medium" : "Strong" };
    }
  </script>
</body>
</html>
